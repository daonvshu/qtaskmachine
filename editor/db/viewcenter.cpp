/********************************************************************************
** This file is auto generated by vscode-qtdao.
** Don't modify this file!
********************************************************************************/
#include "viewcenter.h"

int ViewCenter::Info::fieldSize() {
    return 4;
}

QString ViewCenter::Info::getTableName() {
    return QLatin1String("tmf_viewcenter");
}

QString ViewCenter::Info::getSourceName() {
    return getTableName();
}

QStringList ViewCenter::Info::getFields() {
    return {
        QLatin1String("config_path"),
        QLatin1String("flow_name"),
        QLatin1String("x"),
        QLatin1String("y"),
    };
}

QStringList ViewCenter::Info::getFieldsWithoutAutoIncrement() {
    return {
        QLatin1String("config_path"),
        QLatin1String("flow_name"),
        QLatin1String("x"),
        QLatin1String("y"),
    };
}

QStringList ViewCenter::Info::getFieldsType() {
    return {
        QStringLiteral("config_path text not null"),
        QStringLiteral("flow_name text not null"),
        QStringLiteral("x real null default 0"),
        QStringLiteral("y real null default 0"),
    };
}

QStringList ViewCenter::Info::getPrimaryKeys() {
    return {
    };
}

QList<QStringList> ViewCenter::Info::getIndexFields() {
    return {
    };
}

QList<QStringList> ViewCenter::Info::getUniqueIndexFields() {
    return {
        { QLatin1String("config_path"), QLatin1String("flow_name") },
    };
}

bool ViewCenter::Info::isAutoIncrement(const QString& name) {
    return 
        false;
}

QList<ForeignKey> ViewCenter::Info::getForeignKeys() {
    return {
    };
}

QVariantList ViewCenter::Tool::getValueWithoutAutoIncrement(const ViewCenter& entity) {
    return QVariantList()
        << entity.configPath
        << entity.flowName
        << entity.x
        << entity.y
    ;
}

QVariant ViewCenter::Tool::getValueByName(const ViewCenter& entity, const QString& target) {
    if (target == QLatin1String("config_path")) {
        return entity.configPath;
    }
    if (target == QLatin1String("flow_name")) {
        return entity.flowName;
    }
    if (target == QLatin1String("x")) {
        return entity.x;
    }
    if (target == QLatin1String("y")) {
        return entity.y;
    }
    return entity.__extra.value(target);
}

void ViewCenter::Tool::bindAutoIncrementId(ViewCenter& entity, const QVariant& id) {
}

void ViewCenter::Tool::bindValue(ViewCenter& entity, const QString& target, QVariant value) {
    if (target == QLatin1String("config_path")) {
        entity.configPath = value.value<QString>();
    }
    else if (target == QLatin1String("flow_name")) {
        entity.flowName = value.value<QString>();
    }
    else if (target == QLatin1String("x")) {
        entity.x = value.value<qreal>();
    }
    else if (target == QLatin1String("y")) {
        entity.y = value.value<qreal>();
    }
    else {
        entity.__putExtra(target, value);
    }
}

ViewCenter ViewCenter::Tool::fromJson(const QJsonObject& object) {
    ViewCenter entity;
    entity.configPath = object.value(QLatin1String("config_path")).toVariant().value<QString>();
    entity.flowName = object.value(QLatin1String("flow_name")).toVariant().value<QString>();
    entity.x = object.value(QLatin1String("x")).toVariant().value<qreal>();
    entity.y = object.value(QLatin1String("y")).toVariant().value<qreal>();
    return entity;
}

QJsonObject ViewCenter::Tool::toJson(const ViewCenter& entity, const QStringList& excludeKeys) {
    QJsonObject object;
    object.insert(QLatin1String("config_path"), entity.configPath);
    object.insert(QLatin1String("flow_name"), entity.flowName);
    object.insert(QLatin1String("x"), entity.x);
    object.insert(QLatin1String("y"), entity.y);

    for (const auto& key : excludeKeys) {
        object.remove(key);
    }
    return object;
}

bool ViewCenter::operator==(const ViewCenter& other) const {
    return 
        configPath == other.configPath &&
        flowName == other.flowName &&
        x == other.x &&
        y == other.y
    ;
}

bool ViewCenter::operator!=(const ViewCenter& other) const {
    return !(*this == other);
}

