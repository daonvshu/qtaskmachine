/********************************************************************************
** This file is auto generated by vscode-qtdao.
** Don't modify this file!
********************************************************************************/
#pragma once

#include <qobject.h>
#include <qvariant.h>
#include <qdatetime.h>
#include <qjsonobject.h>

#include "condition/entityfield.h"
#include "condition/foreignkey.h"

class ViewCenter {
public:
    // 
    QString configPath;

    // 
    QString flowName;

    // 
    qreal x = 0;

    // 
    qreal y = 0;

    QVariantMap __extra;

public:
    ViewCenter () {}

    ViewCenter (
        const QString& configPath,
        const QString& flowName,
        const qreal& x,
        const qreal& y
    )
    : configPath(configPath)
    , flowName(flowName)
    , x(x)
    , y(y)
    {}

    ViewCenter (
        const QString& configPath,
        const QString& flowName
    )
    : configPath(configPath)
    , flowName(flowName)
    {}

public:
    class Fields {
    public:
        dao::EntityField<QString> configPath{QLatin1String("config_path"), QLatin1String("tmf_viewcenter"), false};
        dao::EntityField<QString> flowName{QLatin1String("flow_name"), QLatin1String("tmf_viewcenter"), false};
        dao::EntityField<qreal> x{QLatin1String("x"), QLatin1String("tmf_viewcenter"), false};
        dao::EntityField<qreal> y{QLatin1String("y"), QLatin1String("tmf_viewcenter"), false};

    protected:
        void reset(const QString& tbName) {
            configPath.resetTb(tbName);
            flowName.resetTb(tbName);
            x.resetTb(tbName);
            y.resetTb(tbName);
        }
    };

    struct Info {
        enum {
            Attach = 1
        };

        static int fieldSize();

        static QString getTableName();

        static QString getSourceName();

        static QStringList getFields();

        static QStringList getFieldsWithoutAutoIncrement();

        static QStringList getFieldsType();

        static QStringList getPrimaryKeys();

        static QList<QStringList> getIndexFields();

        static QList<QStringList> getUniqueIndexFields();

        static bool isAutoIncrement(const QString& name);

        static QList<ForeignKey> getForeignKeys();
    };

    struct Tool {
        static QVariantList getValueWithoutAutoIncrement(const ViewCenter& entity);

        static QVariant getValueByName(const ViewCenter& entity, const QString& target);

        static void bindAutoIncrementId(ViewCenter& entity, const QVariant& id);

        static void bindValue(ViewCenter& entity, const QString& target, QVariant value);

        static ViewCenter fromJson(const QJsonObject& object);

        static QJsonObject toJson(const ViewCenter& entity, const QStringList& excludeKeys = QStringList());
    };

    bool operator==(const ViewCenter& other) const;

    bool operator!=(const ViewCenter& other) const;

public:
    //set 
    QT_DEPRECATED void setConfigPath(const QString& configPath) { this->configPath = configPath; }
    //get 
    QT_DEPRECATED QString getConfigPath() const { return configPath; }
    //set 
    QT_DEPRECATED void setFlowName(const QString& flowName) { this->flowName = flowName; }
    //get 
    QT_DEPRECATED QString getFlowName() const { return flowName; }
    //set 
    QT_DEPRECATED void setX(const qreal& x) { this->x = x; }
    //get 
    QT_DEPRECATED qreal getX() const { return x; }
    //set 
    QT_DEPRECATED void setY(const qreal& y) { this->y = y; }
    //get 
    QT_DEPRECATED qreal getY() const { return y; }
    //set temp data
    void __putExtra(const QString& key, const QVariant& extra) {this->__extra.insert(key, extra);}
    //get function select result, like get "as" field result
    template <typename T>
    T __getExtra(const QString& key) const {
        return __extra[key].value<T>();
    }
};
typedef QList<ViewCenter> ViewCenterList;
